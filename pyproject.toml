[tool]
[tool.poetry]
name = "dike"
version = "0.3.1"
homepage = "https://github.com/chr1st1ank/dike"
description = "Python asyncio tools for web service resilience."
authors = ["Christian Krudewig <chr1st1ank@krudewig-online.de>"]
readme = "README.md"
license = "Apache-2.0"
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: Apache Software License',
    'Natural Language :: English',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Operating System :: OS Independent',
    'Framework :: AsyncIO'
]
packages = [
    { include = "dike" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.7.1,<4.0"
pymdown-extensions = {version = "^8.2", extras = ["docs"]}

[tool.poetry.extras]
test = [
    "pytest",
    "black",
    "isort",
    "flake8",
    "flake8-docstrings",
    "phmdoctest",
    "pytest-cov",
    "yamllint"
]

dev = ["tox", "pre-commit", "virtualenv", "pip", "twine", "toml"]

doc = [
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkapi",
    "mkdocs-autorefs"
]

[tool.poetry.dev-dependencies]
black = { version = "*" }
flake8 = { version = "*" }
flake8-docstrings = { version = "*" }
isort = { version = "*" }
mkdocs = { version = "^1.0.0" }
mkdocs-autorefs = { version = "*" }
mkdocs-include-markdown-plugin = { version = "*" }
mkapi = { version = "*" }
pip = { version = "^20.3.1" }
pre-commit = { version = "^2.12.0" }
pytest = "^6.2.4"
pytest-cov = { version = "*" }
toml = { version = "*" }
tox = { version = "*" }
twine = { version = "*" }
virtualenv = { version = "^20.0" }
pylint = "^*"
yamllint = "*"
pylint-junit = "*"
numpy = "^1.21.0"
pytest-parametrized = "^1.3"
httpx = "^0.18.2"
fastapi = {version = "^0.66.0"}
uvicorn = "^0.14.0"
phmdoctest = "^1.2.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100

[tool.pylint.master]
reports = false
msg-template = "{path}:{line}: {msg_id} ({symbol}) {msg} ({obj})"
load-plugins = [
    "pylint.extensions.docparams", # Find parameters missing in docstrings
    "pylint.extensions.docstyle", # Detect wrong docstring formatting
]
disable = [
    "bad-continuation", # Creates many false positives conflicting with black
    "invalid-name", # Creates warnings for local single-letter variables
    "fixme", # Creates warnings for todo items
    "no-else-return", # Creates refactor result for indented else block; which however might be more readable
    "duplicate-code", # Unfortunately this gives alerts also for identical function signatures
    "line-too-long", # Checked already by flake8
]

[tool.pylint.design]
max-args = 10  # Maximum number of arguments for functions
max-attributes = 15  # Maximum number of attributes for a class
